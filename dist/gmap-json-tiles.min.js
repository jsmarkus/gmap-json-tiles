var GMapJSONTiles=function(){var a=function(a,b){var c,d=function(a,b,c){var g;switch(a.type){case"Point":b.position=new google.maps.LatLng(a.coordinates[1],a.coordinates[0]),g=new google.maps.Marker(b),c&&g.set("geojsonProperties",c);break;case"MultiPoint":g=[];for(var h=0;h<a.coordinates.length;h++)b.position=new google.maps.LatLng(a.coordinates[h][1],a.coordinates[h][0]),g.push(new google.maps.Marker(b));if(c)for(var i=0;i<g.length;i++)g[i].set("geojsonProperties",c);break;case"LineString":for(var j=[],h=0;h<a.coordinates.length;h++){var k=a.coordinates[h],l=new google.maps.LatLng(k[1],k[0]);j.push(l)}b.path=j,g=new google.maps.Polyline(b),c&&g.set("geojsonProperties",c);break;case"MultiLineString":g=[];for(var h=0;h<a.coordinates.length;h++){for(var j=[],m=0;m<a.coordinates[h].length;m++){var k=a.coordinates[h][m],l=new google.maps.LatLng(k[1],k[0]);j.push(l)}b.path=j,g.push(new google.maps.Polyline(b))}if(c)for(var i=0;i<g.length;i++)g[i].set("geojsonProperties",c);break;case"Polygon":for(var n,o,p=[],h=0;h<a.coordinates.length;h++){for(var j=[],m=0;m<a.coordinates[h].length;m++){var l=new google.maps.LatLng(a.coordinates[h][m][1],a.coordinates[h][m][0]);j.push(l)}h?1==h?(o=f(j),n==o?p.push(j.reverse()):p.push(j)):n==o?p.push(j.reverse()):p.push(j):(n=f(j),p.push(j))}b.paths=p,g=new google.maps.Polygon(b),c&&g.set("geojsonProperties",c);break;case"MultiPolygon":g=[];for(var h=0;h<a.coordinates.length;h++){for(var n,o,p=[],m=0;m<a.coordinates[h].length;m++){for(var j=[],i=0;i<a.coordinates[h][m].length;i++){var l=new google.maps.LatLng(a.coordinates[h][m][i][1],a.coordinates[h][m][i][0]);j.push(l)}m?1==m?(o=f(j),n==o?p.push(j.reverse()):p.push(j)):n==o?p.push(j.reverse()):p.push(j):(n=f(j),p.push(j))}b.paths=p,g.push(new google.maps.Polygon(b))}if(c)for(var i=0;i<g.length;i++)g[i].set("geojsonProperties",c);break;case"GeometryCollection":if(g=[],a.geometries)for(var h=0;h<a.geometries.length;h++)g.push(d(a.geometries[h],b,c||null));else g=e('Invalid GeoJSON object: GeometryCollection object missing "geometries" member.');break;default:g=e('Invalid GeoJSON object: Geometry object must be one of "Point", "LineString", "Polygon" or "MultiPolygon".')}return g},e=function(a){return{type:"Error",message:a}},f=function(a){for(var b,c=0,d=0;d<a.length-2;d++)c+=(a[d+1].lat()-a[d].lat())*(a[d+2].lng()-a[d].lng())-(a[d+2].lat()-a[d].lat())*(a[d+1].lng()-a[d].lng());return b=c>0?!0:!1},g=b||{};switch(a.type){case"FeatureCollection":if(a.features){c=[];for(var h=0;h<a.features.length;h++)c.push(d(a.features[h].geometry,g,a.features[h].properties))}else c=e('Invalid GeoJSON object: FeatureCollection object missing "features" member.');break;case"GeometryCollection":if(a.geometries){c=[];for(var h=0;h<a.geometries.length;h++)c.push(d(a.geometries[h],g))}else c=e('Invalid GeoJSON object: GeometryCollection object missing "geometries" member.');break;case"Feature":c=a.properties&&a.geometry?d(a.geometry,g,a.properties):e('Invalid GeoJSON object: Feature object missing "properties" or "geometry" member.');break;case"Point":case"MultiPoint":case"LineString":case"MultiLineString":case"Polygon":case"MultiPolygon":c=a.coordinates?c=d(a,g):e('Invalid GeoJSON object: Geometry object missing "coordinates" member.');break;default:c=e('Invalid GeoJSON object: GeoJSON object must be one of "Point", "LineString", "Polygon", "MultiPolygon", "Feature", "FeatureCollection" or "GeometryCollection".')}return c},b=function(a){"use strict";function b(a,b){this._options=b,this._overlays=[],a&&this.fromGeoJSON(a)}var c=b.prototype;return c.fromGeoJSON=function(b){this.clear();var c=new a(b,this._options);this.add(c),this.properties=b.properties,this.id=b.id},c.setMap=function(a){this.map=a;for(var b=this._overlays,c=0;c<b.length;c++){var d=b[c];d.setMap(this.map)}},c.add=function(a){Array.isArray(a)||(a=[a]);for(var b=0;b<a.length;b++){var c=a[b];c&&"Error"!==c.type&&(c.setMap(this.map),this._overlays.push(c))}},c.clear=function(){this.setMap(null),this._overlays=[]},c.setOptions=function(a){for(var b=this._overlays,c=0;c<b.length;c++){var d=b[c];d.setOptions(a)}},c.addListener=function(a,b){for(var c=this._overlays,d=0;d<c.length;d++){var e=c[d];google.maps.event.addListener(e,a,b)}},b}(a),c=function(a){"use strict";function b(a,b){if(b=b||{},this.tileSize=b.tileSize||new google.maps.Size(256,256),this.featureOptions=b.featureOptions||!1,this.onFeature=b.onFeature||!1,this.tileUrl=b.tileUrl,"function"!=typeof this.tileUrl)throw new TypeError("options.tileUrl must be function");if(this.request=b.request||!1,!1!==this.request&&"function"!=typeof this.request)throw new TypeError("options.request must be function");this.map=a,this._featureRefCount={},this._featureByTile={},this._featureByKey={},this._queuedTiles={}}function c(a,b){return[a,b].join("|")}function d(a,b){return[a.x,a.y,b].join("|")}var e=b.prototype;return e.getTile=function(a,b,c){var e=d(a,b),f=c.createElement("div");return f.setAttribute("data-id",e),this._loadTile(a,b),f},e.releaseTile=function(a){var b=a.getAttribute("data-id");this._unsetTileQueued(b),this.onRemoveTile&&this.onRemoveTile(b),this._unlinkFeaturesFromTile(b)},e._loadTile=function(a,b){var c=d(a,b),e=this.tileUrl(a,b),f=this._onTileLoaded.bind(this,c,b),g=this._unsetTileQueued.bind(this,c);this._setTileQueued(c),this.request?this.request(e,f,g):$.ajax({url:e,type:"get",dataType:"json"}).done(f).fail(g)},e._onTileLoaded=function(a,b,c){if(this._isTileQueued(a)){this._unsetTileQueued(a);var d=c.features;this.onAddTile&&this.onAddTile(a);for(var e=0;e<d.length;e++){var f=d[e];this._addFeature(f,a,b)}}},e._setTileQueued=function(a){this._queuedTiles[a]=!0},e._unsetTileQueued=function(a){delete this._queuedTiles[a]},e._isTileQueued=function(a){return!!this._queuedTiles[a]},e._linkFeatureToTile=function(a,b,d){var e=c(a,b);this._featureByTile[d]||(this._featureByTile[d]=[]),this._featureByTile[d].push(e),this._incFeatureRefCount(e)},e._unlinkFeaturesFromTile=function(a){var b=this._featureByTile[a];if(b)for(var c=0;c<b.length;c++){var d=b[c];this._decFeatureRefCount(d)}},e._getFeatureRefCount=function(a){var b=this._featureRefCount[a]||0;return b},e._incFeatureRefCount=function(a){this._featureRefCount[a]=this._getFeatureRefCount(a)+1},e._decFeatureRefCount=function(a){var b=this._getFeatureRefCount(a);b&&(b--,b?this._featureRefCount[a]=b:(delete this._featureRefCount[a],this._removeFeature(a)))},e._addFeature=function(b,d,e){var f=b.id,g=c(e,f);if(!this._featureByKey[g]){var h=new a(b,this.featureOptions);this.onFeature&&this.onFeature(h,g),h.setMap(this.map),this._featureByKey[g]=h,this.onAddFeature&&this.onAddFeature(g,h)}this._linkFeatureToTile(e,f,d)},e._removeFeature=function(a){var b=this._featureByKey[a];this.onRemoveFeature&&this.onRemoveFeature(a,b),b.clear(),delete this._featureByKey[a]},b}(b);return{Feature:b,JSONMapType:c}}();